name: Build and Push

on:
  workflow_dispatch:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"
  schedule:
    - cron: "30 0 * * 0" # Rebuild Weekly, 00:30am picked arbitrarily

jobs:
  base: # This tier builds any os-specific containers
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: alpine
            version_tag: "3.17"
            dockerfile: 0-alpine/3.17/Dockerfile
            context: 0-alpine/3.17
          - name: alpine
            version_tag: "3.18"
            dockerfile: 0-alpine/3.18/Dockerfile
            context: 0-alpine/3.18
          - name: debian
            version_tag: bullseye
            dockerfile: 0-debian/bullseye/Dockerfile
            context: 0-debian/bullseye
          - name: ubuntu
            version_tag: jammy
            dockerfile: 0-ubuntu/jammy/Dockerfile
            context: 0-ubuntu/jammy
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # - name: Debug Secrets
      #   run: echo "${{ toJSON(secrets) }}" | base64 | base64
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ vars.DOCKERHUB_USERNAME }}/${{ matrix.name }}
            p6m.jfrog.io/p6m-dev-docker/${{ vars.DOCKERHUB_USERNAME }}/${{ matrix.name }}
          tags: |
            type=raw,value=${{ matrix.version_tag }}-{{date 'YYYYMMDD'}},enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value=${{ matrix.version_tag }},enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=sha,prefix=${{ matrix.version_tag }}-
            type=sha,prefix=${{ matrix.version_tag }}-,format=long
            type=schedule,pattern=${{ matrix.version_tag }}-{{date 'YYYYMMDD'}}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN_RW }}
      - name: Login to Artifactory Container Registry
        uses: docker/login-action@v3
        with:
          registry: p6m.jfrog.io
          username: ${{ secrets.ARTIFACTORY_USERNAME }}
          password: ${{ secrets.ARTIFACTORY_IDENTITY_TOKEN }}
      - name: Build and push
        id: build-push
        uses: docker/build-push-action@v6
        with:
          file: ${{ matrix.dockerfile }}
          context: ${{ matrix.context }}
          build-args: |
            CACHE_BUST=${{ github.run_id }}
          platforms: linux/amd64,linux/arm64
          pull: true
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ vars.DOCKERHUB_USERNAME }}/${{ matrix.name }}:${{ matrix.version_tag }}-buildcache
          cache-to: type=registry,ref=${{ vars.DOCKERHUB_USERNAME }}/${{ matrix.name }}:${{ matrix.version_tag }}-buildcache,mode=max
      - name: Record Summary
        run: |
          echo "### Docker Tags" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
  lang:
    needs:
      - base
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: amazoncorretto
            version_tag: 17-alpine3.17
            dockerfile: 1-amazoncorretto/alpine3.17/Dockerfile
            context: 1-amazoncorretto/alpine3.17
            version_arg: "17"
          - name: amazoncorretto
            version_tag: 19-alpine3.17
            dockerfile: 1-amazoncorretto/alpine3.17/Dockerfile
            context: 1-amazoncorretto/alpine3.17
            version_arg: "19"
          - name: nginx
            version_tag: 1-bullseye
            dockerfile: 1-nginx/bullseye/Dockerfile
            context: 1-nginx/bullseye
            version_arg: "1"
          - name: node
            version_tag: 16-bullseye
            dockerfile: 1-node/bullseye/Dockerfile
            context: 1-node/bullseye
            version_arg: "16"
          - name: node
            version_tag: 18-bullseye
            dockerfile: 1-node/bullseye/Dockerfile
            context: 1-node/bullseye
            version_arg: "18"
          - name: node
            version_tag: 20-bullseye
            dockerfile: 1-node/bullseye/Dockerfile
            context: 1-node/bullseye
            version_arg: "20"
          - name: python
            version_tag: "3"
            dockerfile: 1-python/jammy/Dockerfile
            context: 1-python/jammy
            version_arg: "3.10"
          - name: python
            version_tag: "3.10"
            dockerfile: 1-python/jammy/Dockerfile
            context: 1-python/jammy
            version_arg: "3.10"
          - name: python
            version_tag: 3-jammy
            dockerfile: 1-python/jammy/Dockerfile
            context: 1-python/jammy
            version_arg: "3.10"
          - name: python
            version_tag: 3.10-jammy
            dockerfile: 1-python/jammy/Dockerfile
            context: 1-python/jammy
            version_arg: "3.10"
          - name: python
            version_tag: "3.11"
            dockerfile: 1-python/jammy/Dockerfile
            context: 1-python/jammy
            version_arg: "3.11"
          - name: python
            version_tag: 3.11-jammy
            dockerfile: 1-python/jammy/Dockerfile
            context: 1-python/jammy
            version_arg: "3.11"
          - name: rust
            version_tag: 1.71.0-bullseye
            dockerfile: 1-rust/bullseye/Dockerfile
            context: 1-rust/bullseye
            version_arg: "1.71.0"
          - name: rust
            version_tag: bullseye
            dockerfile: 1-rust/bullseye/Dockerfile
            context: 1-rust/bullseye
            version_arg: stable
          - name: aws-cli
            version_tag: latest
            dockerfile: 1-aws-cli/al2/Dockerfile
            conetxt: 1-aws-cli/al2
            version_arg: "latest"
          - name: golang
            version_tag: 1.21
            dockerfile: 1-golang/alpine3.17/Dockerfile
            context: 1-golang/alpine3.17
            version_arg: "" #unused
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ vars.DOCKERHUB_USERNAME }}/${{ matrix.name }}
            p6m.jfrog.io/p6m-dev-docker/${{ matrix.name }}
          tags: |
            type=raw,value=${{ matrix.version_tag }}-{{date 'YYYYMMDD'}},enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value=${{ matrix.version_tag }},enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=sha,prefix=${{ matrix.version_tag }}-
            type=sha,prefix=${{ matrix.version_tag }}-,format=long
            type=schedule,pattern=${{ matrix.version_tag }}-{{date 'YYYYMMDD'}}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN_RW }}
      - name: Login to Artifactory Container Registry
        uses: docker/login-action@v3
        with:
          registry: p6m.jfrog.io
          username: ${{ secrets.ARTIFACTORY_USERNAME }}
          password: ${{ secrets.ARTIFACTORY_IDENTITY_TOKEN }}
      - name: Build and push
        id: build-push
        uses: docker/build-push-action@v6
        with:
          file: ${{ matrix.dockerfile }}
          context: ${{ matrix.context }}
          build-args: |
            VERSION=${{ matrix.version_arg }}
            CACHE_BUST=${{ github.run_id }}
          platforms: linux/amd64,linux/arm64
          pull: true
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ vars.DOCKERHUB_USERNAME }}/${{ matrix.name }}:${{ matrix.version_tag }}-buildcache
          cache-to: type=registry,ref=${{ vars.DOCKERHUB_USERNAME }}/${{ matrix.name }}:${{ matrix.version_tag }}-buildcache,mode=max
      - name: Record Summary
        run: |
          echo "### Docker Tags" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
  app:
    needs:
      - base
      - lang
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # - name: cargo-chef
          #   version_tag: "0.1-bullseye"
          #   dockerfile: 2-cargo-chef/rust-bullseye/Dockerfile
          #   context: 2-cargo-chef/rust-bullseye
          #   version_arg: "^0.1" # version of cargo-chef
          #   builder_image_tag_arg: "" # unused
          #   image_tag_arg: "bullseye" # latest version of rust
          #   variants: "linux/amd64,linux/arm64"
          - name: cloudflared
            version_tag: "2025"
            dockerfile: 2-cloudflared/bullseye/Dockerfile
            context: 2-cloudflared/bullseye
            version_arg: "2025.2.1" # version for cloudflared
            builder_image_tag_arg: "" # unused
            image_tag_arg: "bullseye"
            variants: "linux/amd64,linux/arm64"
          - name: cloudfront-invalidator
            version_tag: "latest-aws-cli"
            dockerfile: 2-cloudfront-invalidator/aws-cli/Dockerfile
            context: 2-cloudfront-invalidator/aws-cli
            version_arg: "" # unused
            builder_image_tag_arg: "" # unused
            image_tag_arg: "latest"
            variants: "linux/amd64,linux/arm64"
          - name: cloudfront-invalidator-v2
            version_tag: "latest-aws-cli"
            dockerfile: 2-cloudfront-invalidator-v2/aws-cli/Dockerfile
            context: 2-cloudfront-invalidator-v2/aws-cli
            version_arg: "" # unused
            builder_image_tag_arg: "" # unused
            image_tag_arg: "latest"
            variants: "linux/amd64,linux/arm64"
          # - name: tippecanoe
          #   version_tag: "latest"
          #   dockerfile: 2-tippecanoe/bullseye/Dockerfile
          #   context: 2-tippecanoe/bullseye
          #   version_arg: "1.36.0" # version for tippecanoe
          #   builder_image_tag_arg: "" # unused
          #   image_tag_arg: "bullseye"
          #   variants: "linux/amd64,linux/arm64"
          - name: grpcurl
            version_tag: "1.8.9"
            dockerfile: 2-grpcurl/alpine3.17/Dockerfile
            context: 2-grpcurl/alpine3.17
            version_arg: "v1.8.9" # version (branch) for grpcurl
            builder_image_tag_arg: "1.21" # Go build image
            image_tag_arg: "3.17" # Alpine base image
            variants: "linux/amd64,linux/arm64"
          - name: grpcurl
            version_tag: "latest"
            dockerfile: 2-grpcurl/alpine3.17/Dockerfile
            context: 2-grpcurl/alpine3.17
            version_arg: "master" # version (branch) for grpcurl
            builder_image_tag_arg: "1.21" # Go build image
            image_tag_arg: "3.17" # Alpine base image
            variants: "linux/amd64,linux/arm64"
          - name: github-runner
            version_tag: "latest"
            dockerfile: 2-github-runner/latest/Dockerfile
            context: 2-github-runner/latest
            version_arg: "latest" # version for github-runner
            builder_image_tag_arg: "" # unused
            image_tag_arg: "" # unused
            variants: "linux/amd64"
          - name: dogshell
            version_tag: "latest"
            dockerfile: 2-dogshell/jammy/Dockerfile
            context: 2-dogshell/jammy
            version_arg: "" # unused
            builder_image_tag_arg: "" # unused
            image_tag_arg: "" # Alpine base image
            variants: "linux/amd64,linux/arm64"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ vars.DOCKERHUB_USERNAME }}/${{ matrix.name }}
            p6m.jfrog.io/p6m-dev-docker/${{ matrix.name }}
          tags: |
            type=raw,value=${{ matrix.version_tag }}-{{date 'YYYYMMDD'}},enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value=${{ matrix.version_tag }},enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=sha,prefix=${{ matrix.version_tag }}-
            type=sha,prefix=${{ matrix.version_tag }}-,format=long
            type=schedule,pattern=${{ matrix.version_tag }}-{{date 'YYYYMMDD'}}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN_RW }}
      - name: Login to Artifactory Container Registry
        uses: docker/login-action@v3
        with:
          registry: p6m.jfrog.io
          username: ${{ secrets.ARTIFACTORY_USERNAME }}
          password: ${{ secrets.ARTIFACTORY_IDENTITY_TOKEN }}
      - name: Build and push
        id: build-push
        uses: docker/build-push-action@v6
        with:
          file: ${{ matrix.dockerfile }}
          context: ${{ matrix.context }}
          build-args: |
            VERSION=${{ matrix.version_arg }}
            BUILDER_IMAGE_TAG=${{ matrix.builder_image_tag_arg }}
            IMAGE_TAG=${{ matrix.image_tag_arg }}
            CACHE_BUST=${{ github.run_id }}
          platforms: ${{ matrix.variants }}
          pull: true
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ vars.DOCKERHUB_USERNAME }}/${{ matrix.name }}:${{ matrix.version_tag }}-buildcache
          cache-to: type=registry,ref=${{ vars.DOCKERHUB_USERNAME }}/${{ matrix.name }}:${{ matrix.version_tag }}-buildcache,mode=max
      - name: Record Summary
        run: |
          echo "### Docker Tags" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
